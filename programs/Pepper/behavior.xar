<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram scale="100">
                        <Box name="Disable Speech Reco Auto Motion" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="268" y="113">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.autonomousMoves = ALProxy("ALAutonomousMoves")

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        self.autonomousMoves.setExpressiveListeningEnabled(True)

    def onInput_onStart(self):
        self.autonomousMoves.setExpressiveListeningEnabled(False)
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="Initialize" id="10" localization="8" tooltip="初期設定(衝突回避など)を行います。" x="126" y="121">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Set External Anti-Collision" id="5" localization="8" tooltip="Enable or disable the collision protection on some specific part of the robot&apos;s body with external environment.&#x0A;&#x0A;For example if the protection is enabled on his left arm he will move his arm all the&#x0A;same than when it is not but avoiding his other body parts." x="286" y="43">
                                                <bitmap>media/images/box/sensors/anti_collision.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motion = ALProxy( "ALMotion" )

    def onUnload(self):
        pass

    def onInput_onSet(self):
        # is it enable or disable asked?
        enable = (self.getParameter("Action") == "Enable")
        # enable/disable collision protection
        self.motion.setExternalCollisionProtectionEnabled( self.getParameter("Body part"), enable )
        self.output() # activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The anti-collision feature is enabled or disabled when this input is stimulated." id="2" />
                                                <Output name="output" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                <Parameter name="Body part" inherits_from_parent="0" content_type="3" value="Arms" default_value="All" custom_choice="0" tooltip="Body part which avoids the collision." id="4">
                                                    <Choice value="All" />
                                                    <Choice value="Move" />
                                                    <Choice value="Arms" />
                                                    <Choice value="LArm" />
                                                    <Choice value="RArm" />
                                                </Parameter>
                                                <Parameter name="Action" inherits_from_parent="0" content_type="3" value="Disable" default_value="Enable" custom_choice="0" tooltip="Enable or disable the collision protection." id="5">
                                                    <Choice value="Disable" />
                                                    <Choice value="Enable" />
                                                </Parameter>
                                            </Box>
                                            <Box name="Set Self Anti-Collision" id="6" localization="8" tooltip="Enable or disable the self collision protection on some specific part of the robot&apos;s body.&#x0A;&#x0A;For example if the protection is enabled on his left arm he will move his arm all the&#x0A;same than when it is not but avoiding his other body parts." x="451" y="41">
                                                <bitmap>media/images/box/sensors/anti_collision.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motion = ALProxy( "ALMotion" )

    def onUnload(self):
        pass

    def onInput_onSet(self):
        # is it enable or disable asked?
        enable = (self.getParameter("Action") == "Enable")
        # enable/disable collision protection
        result = self.motion.setCollisionProtectionEnabled( self.getParameter("Body part"), enable )
        if( result ):
            self.success()
        else:
            self.logger.warning( "Disabling collision protection failed. Deactivation succeeds only if the current state of the chain is not in collision. If you want to deactivate collision of both arms, they need to be off collision." )
            self.failure()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The anti-collision feature is enabled or disabled when this input is stimulated." id="2" />
                                                <Output name="success" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the collision protection has been successfully enabled or disabled.&#x0A;&#x0A;Note: The only case where there is a failure is when you try to disable the&#x0A;anti-collision while it is currently in collision with some part of his body." id="3" />
                                                <Output name="failure" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the collision protection has failed to be enabled or disabled.&#x0A;&#x0A;Note: The only case where there is a failure is when you try to disable the&#x0A;anti-collision while it is currently in collision with some part of his body." id="4" />
                                                <Parameter name="Body part" inherits_from_parent="0" content_type="3" value="Arms" default_value="Arms" custom_choice="0" tooltip="Body part which avoids the collision." id="5">
                                                    <Choice value="Arms" />
                                                    <Choice value="LArm" />
                                                    <Choice value="RArm" />
                                                </Parameter>
                                                <Parameter name="Action" inherits_from_parent="0" content_type="3" value="Enable" default_value="Enable" custom_choice="0" tooltip="Enable or disable the collision protection." id="6">
                                                    <Choice value="Disable" />
                                                    <Choice value="Enable" />
                                                </Parameter>
                                            </Box>
                                            <Box name="Eye LEDs" id="14" localization="8" tooltip="Set the LED color of the eyes. Note that you must open the box to enter the color." x="141" y="44">
                                                <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                                    <Choice value="Both" />
                                                    <Choice value="Left" />
                                                    <Choice value="Right" />
                                                </Parameter>
                                                <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Eyes LEDs" id="15" localization="8" tooltip="Set the color of LEDs of robot&apos;s eyes." x="281" y="41">
                                                                    <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_color(self, p):
        if( self.getParameter("Side") == "Left" ):
            sGroup = "LeftFaceLeds"
        elif( self.getParameter("Side") == "Right" ):
            sGroup = "RightFaceLeds"
        else:
            sGroup = "FaceLeds"
        id = self.leds.post.fadeRGB(sGroup, 256*256*p[0] + 256*p[1] + p[2], self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="color" type="2" type_size="3" nature="2" inner="0" tooltip="Color of robot&apos;s eyes." id="2" />
                                                                    <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Side" inherits_from_parent="1" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                                                        <Choice value="Both" />
                                                                        <Choice value="Left" />
                                                                        <Choice value="Right" />
                                                                    </Parameter>
                                                                    <Parameter name="Duration (s)" inherits_from_parent="1" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                                                </Box>
                                                                <Box name="Color Edit" id="16" localization="8" tooltip="Transmit a table of number [R,G,B] correponsding to the selected color." plugin="coloredit_plugin" x="105" y="47">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([85, 255, 127])]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <color>#55ff7f</color>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="To send the color on the output." id="2" />
                                                                    <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                                                </Box>
                                                                <Link inputowner="15" indexofinput="2" outputowner="16" indexofoutput="3" />
                                                                <Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="15" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="Set Language" id="7" localization="8" tooltip="Select the language you would like the robot to speak and understand. Any following call to&#x0A;ALSpeechRecognition (Speech Reco. box for instance) or ALTextToSpeech (Say box&#x0A;for instance) will use this language." x="621" y="38">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        try:
            self.tts = ALProxy("ALTextToSpeech")
        except:
            self.logger.warn("ALTextToSpeech is not available, language setting cannot be applied to speech")
            self.tts = None

        try:
            self.asr = ALProxy("ALSpeechRecognition")
        except:
            self.logger.warn("ALSpeechRecognition is not available, language setting cannot be applied to recognition")
            self.asr = None

        try:
            self.dialog = ALProxy("ALDialog")
        except:
            self.logger.warn("ALDialog is not available, language setting cannot be applied to dialog")
            self.dialog = None

    def onInput_onSet(self):
        lang = self.getParameter("Language")
        try:
            if self.asr:
                self.asr.setLanguage( self.getParameter("Language") )
            if self.tts:
                self.tts.setLanguage( self.getParameter("Language") )
            if self.dialog:
                self.dialog.setLanguage( self.getParameter("Language") )
            if self.tts is None and self.asr is None and self.dialog is None:
                raise RuntimeError("Cannot set language: neither ALTextToSpeech nor ALSpeechRecognition nor ALDialog is available.")
            self.onReady()
        except:
            error = "Language " + lang + " cannot be set."
            self.logger.warn(error)
            self.onError(error)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" />
                                                <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" />
                                                <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="Error output:&#x0A;- triggered if the language asked cannot be set" id="4" />
                                                <Parameter name="Language" inherits_from_parent="0" content_type="3" value="Japanese" default_value="English" custom_choice="1" tooltip="Set the language the robot speaks and understands." id="5">
                                                    <Choice value="Arabic" />
                                                    <Choice value="Brazilian" />
                                                    <Choice value="Chinese" />
                                                    <Choice value="Czech" />
                                                    <Choice value="Danish" />
                                                    <Choice value="Dutch" />
                                                    <Choice value="English" />
                                                    <Choice value="Finnish" />
                                                    <Choice value="French" />
                                                    <Choice value="German" />
                                                    <Choice value="Greek" />
                                                    <Choice value="Italian" />
                                                    <Choice value="Japanese" />
                                                    <Choice value="Korean" />
                                                    <Choice value="Norwegian" />
                                                    <Choice value="Polish" />
                                                    <Choice value="Portuguese" />
                                                    <Choice value="Russian" />
                                                    <Choice value="Spanish" />
                                                    <Choice value="Swedish" />
                                                    <Choice value="Turkish" />
                                                </Parameter>
                                                <Resource name="Speech" type="Lock" timeout="0" />
                                            </Box>
                                            <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="3" />
                                            <Link inputowner="5" indexofinput="2" outputowner="14" indexofoutput="3" />
                                            <Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="3" />
                                            <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Main Routine" id="6" localization="8" tooltip="声をかけることでPepperの操縦を開始し、再び声をかけることで操縦を終了します。" x="689" y="115">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram scale="118.921">
                                            <Box name="Kinect Data Receive" id="1" localization="8" tooltip="Kinectから出力されたデータをサーバーから受け取ります。&#x0A;&#x0A;通信の確立などに失敗するとエラーで停止します。" x="687" y="169">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time
import socket
import struct
from contextlib import closing


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motion = ALProxy("ALMotion")
        self.jointnames = self.get_jointnames()
        self.res_converter = struct.Struct("f" * len(self.jointnames))

    def onLoad(self):
        self.connectionEnabled = True
        self.isConnectionExists = False

    def onUnload(self):
        self.connectionEnabled = False

    def onInput_onStart(self):
        bufsize = 4096

        if self.isConnectionExists:
            #起動済みなので信号自体を完全無視
            return

        self.isConnectionExists = True
        self.isFirstMove = True

        self.connectionEnabled = True
        hostIP = self.getParameter("serverIP")
        hostPort = self.getParameter("serverPort")
        timeoutSec = self.getParameter("Timeout")

        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(timeoutSec)
        with closing(sock):
            try:
                sock.connect((hostIP, hostPort))
                while self.connectionEnabled:
                    sock.send('getj'.encode('utf-8'))
                    res = sock.recv(bufsize)
                    self.process_jointdata(res)
            except socket.timeout:
                self.onTimeout()

        self.isConnectionExists = False
        self.onStopped() #activate the output of the box


    def onInput_onStop(self):
        self.onUnload()

    def process_jointdata(self, res):
        #NOTE: リスト化するのは安全上の処理で書き換えるため
        destAngles = list(self.res_converter.unpack(res))
        #self.logger.info("angle is " + str(destAngles))
        #ベジエ補間で滑らかに動かす
        #微分値を考慮すると更に良いかもしれないがコレでも割と落ち着く
        currentAngles = self.motion.getAngles(self.jointnames, True)

        #追加処理: 安全に動かすため、いきなり角度が大変更されるのを禁止する
        #pi / 3つまり60度くらいで縛る
        #TODO: WristYawとかは角度制限の対象から外してもいいと思う
        angleChangeLimit = 0.6
        for i in range(len(destAngles[:-2])):
            if destAngles[i] - currentAngles[i] > angleChangeLimit:
                destAngles[i] = currentAngles[i] + angleChangeLimit
            elif destAngles[i] - currentAngles[i] < -angleChangeLimit:
                destAngles[i] = currentAngles[i] - angleChangeLimit

        dTime = self.getParameter("interval")
        if self.isFirstMove:
            dTime = 2.0
            self.isFirstMove = False

        dTime3 = dTime / 3.0
        times = [[0, dTime] for i in self.jointnames]
        keys = [
            [
                [src, [3, -0.33333, 0], [3, dTime3, 0]],
                [dst, [3, -dTime3, 0], [3, 0.33333, 0]]
            ] for src, dst in zip(currentAngles, destAngles)
            ]

        self.motion.angleInterpolationBezier(self.jointnames, times, keys)

        #dTime = self.getParameter("interval")
        #self.motion.setAngles(self.jointnames, destAngles, 0.2)
        #time.sleep(dTime)

    def get_jointnames(self):
        return [
            "LShoulderPitch",
            "LShoulderRoll",
            "LElbowYaw",
            "LElbowRoll",
            "LWristYaw",
            "RShoulderPitch",
            "RShoulderRoll",
            "RElbowYaw",
            "RElbowRoll",
            "RWristYaw",
            "HipPitch",
            "LHand",
            "RHand"
        ]]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Output name="onTimeout" type="1" type_size="1" nature="2" inner="0" tooltip="接続がタイムアウトになった場合に発生します。" id="5" />
                                                <Parameter name="serverIP" inherits_from_parent="0" content_type="3" value="192.168.3.90" default_value="IPofSomePC" custom_choice="0" tooltip="角度値の取得元になるサーバのアドレスです。" id="6" />
                                                <Parameter name="serverPort" inherits_from_parent="0" content_type="1" value="13000" default_value="13000" min="0" max="65535" tooltip="角度値取得元のサーバのポート番号です。" id="7" />
                                                <Parameter name="interval" inherits_from_parent="0" content_type="2" value="0.5" default_value="0.2" min="0.2" max="2" tooltip="サーバからデータを取って来る間隔を秒単位で指定します。低くするとゆったりカクカクした動きになり、高くすると素早くガクガクします。" id="8" />
                                                <Parameter name="Timeout" inherits_from_parent="0" content_type="2" value="3" default_value="3" min="0.1" max="10" tooltip="接続のタイムアウト時間を表します。" id="9" />
                                            </Box>
                                            <Box name="Stand" id="11" localization="8" tooltip="Kinectの通信が途絶えると直立姿勢に戻ります。" x="950" y="112">
                                                <bitmap>media/images/box/movement/move.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="24">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram />
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                    <ActuatorList model="juliette">
                                                        <ActuatorCurve name="value" actuator="HeadPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="24" value="-11.25" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HeadYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="24" value="0" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HipPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="24" value="-1.40625" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="HipRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="24" value="-0.175782" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="KneePitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="24" value="0" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="24" value="-29.1797" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="24" value="-69.7851" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="24" value="0.593146" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="24" value="89.4727" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="24" value="6.41602" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="LWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="24" value="0.173378" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="24" value="29.8828" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RElbowYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="24" value="69.7852" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RHand" recordable="0" mute="0" unit="1">
                                                            <Key frame="24" value="0.593146" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="0" mute="0" unit="0">
                                                            <Key frame="24" value="89.7363" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="0" mute="0" unit="0">
                                                            <Key frame="24" value="-6.94337" />
                                                        </ActuatorCurve>
                                                        <ActuatorCurve name="value" actuator="RWristYaw" recordable="0" mute="0" unit="0">
                                                            <Key frame="24" value="-0.266077" />
                                                        </ActuatorCurve>
                                                    </ActuatorList>
                                                </Timeline>
                                            </Box>
                                            <Box name="Say" id="9" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="950" y="238">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="132" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                </Box>
                                                                <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : " مرحبا ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " Hello ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " あれ、接続がうまくいかないみたいだよ。 ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : " 你好 "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <arabic>
                                                                            <![CDATA[مرحبا]]>
</arabic>
                                                                        <czech>
                                                                            <![CDATA[Ahoj]]>
</czech>
                                                                        <danish>
                                                                            <![CDATA[Hej]]>
</danish>
                                                                        <german>
                                                                            <![CDATA[Hallo]]>
</german>
                                                                        <greek>
                                                                            <![CDATA[]]>
</greek>
                                                                        <english>
                                                                            <![CDATA[Hello]]>
</english>
                                                                        <spanish>
                                                                            <![CDATA[Hola]]>
</spanish>
                                                                        <finnish>
                                                                            <![CDATA[Hei]]>
</finnish>
                                                                        <french>
                                                                            <![CDATA[Bonjour]]>
</french>
                                                                        <italian>
                                                                            <![CDATA[Ciao]]>
</italian>
                                                                        <japanese>
                                                                            <![CDATA[あれ、接続がうまくいかないみたいだよ。]]>
</japanese>
                                                                        <korean>
                                                                            <![CDATA[안녕하세요]]>
</korean>
                                                                        <dutch>
                                                                            <![CDATA[Hallo]]>
</dutch>
                                                                        <norwegian>
                                                                            <![CDATA[]]>
</norwegian>
                                                                        <polish>
                                                                            <![CDATA[Cześć]]>
</polish>
                                                                        <brazilian>
                                                                            <![CDATA[Olá]]>
</brazilian>
                                                                        <portuguese>
                                                                            <![CDATA[Olá]]>
</portuguese>
                                                                        <russian>
                                                                            <![CDATA[Привет]]>
</russian>
                                                                        <swedish>
                                                                            <![CDATA[Hallå]]>
</swedish>
                                                                        <turkish>
                                                                            <![CDATA[Merhaba]]>
</turkish>
                                                                        <chinese>
                                                                            <![CDATA[你好]]>
</chinese>
                                                                        <language>10</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                                <Resource name="Speech" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="331" y="211">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="AdditionalActionStartMime" id="7" localization="8" tooltip="Kinectでの動きを開始する時に行う付属的な動作です。" x="727" y="21">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram scale="118.921">
                                                                <Box name="Eye LEDs" id="13" localization="8" tooltip="Set the LED color of the eyes. Note that you must open the box to enter the color." x="154" y="19">
                                                                    <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                                                        <Choice value="Both" />
                                                                        <Choice value="Left" />
                                                                        <Choice value="Right" />
                                                                    </Parameter>
                                                                    <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="Eyes LEDs" id="15" localization="8" tooltip="Set the color of LEDs of robot&apos;s eyes." x="281" y="41">
                                                                                        <bitmap>media/images/box/interaction/LED.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_color(self, p):
        if( self.getParameter("Side") == "Left" ):
            sGroup = "LeftFaceLeds"
        elif( self.getParameter("Side") == "Right" ):
            sGroup = "RightFaceLeds"
        else:
            sGroup = "FaceLeds"
        id = self.leds.post.fadeRGB(sGroup, 256*256*p[0] + 256*p[1] + p[2], self.getParameter("Duration (s)"))
        self.ids.append(id)
        self.leds.wait(id, 0)
        self.ids.remove(id)
        if( self.ids == [] ):
            self.onDone() # activate output of the box]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="color" type="2" type_size="3" nature="2" inner="0" tooltip="Color of robot&apos;s eyes." id="2" />
                                                                                        <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                                        <Parameter name="Side" inherits_from_parent="1" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                                                                            <Choice value="Both" />
                                                                                            <Choice value="Left" />
                                                                                            <Choice value="Right" />
                                                                                        </Parameter>
                                                                                        <Parameter name="Duration (s)" inherits_from_parent="1" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                                                                    </Box>
                                                                                    <Box name="Color Edit" id="16" localization="8" tooltip="Transmit a table of number [R,G,B] correponsding to the selected color." plugin="coloredit_plugin" x="105" y="47">
                                                                                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([85, 255, 127])]]>
</content>
                                                                                        </script>
                                                                                        <pluginContent>
                                                                                            <color>#55ff7f</color>
                                                                                        </pluginContent>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="To send the color on the output." id="2" />
                                                                                        <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                                                                    </Box>
                                                                                    <Link inputowner="15" indexofinput="2" outputowner="16" indexofoutput="3" />
                                                                                    <Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="3" outputowner="15" indexofoutput="3" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Basic Awareness" id="8" localization="8" tooltip="This box is an interface to the module ALBasicAwareness.&#x0A;&#x0A;It is a simple way to make the robot establish and keep eye contact with people.&#x0A;&#x0A;V1.1.0" x="157" y="125">
                                                                    <bitmap>media/images/box/tracker/basicawareness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        try:
            self.awareness = ALProxy('ALBasicAwareness')
        except Exception as e:
            self.awareness = None
            self.logger.error(e)

        self.memory = ALProxy('ALMemory')

        self.isRunning = False
        self.trackedHuman = -1

        import threading
        self.subscribingLock = threading.Lock()

        self.BIND_PYTHON(self.getName(), "setParameter")


    def onUnload(self):
        if self.isRunning:
            if self.awareness:
                self.awareness.stopAwareness()
                self.setALMemorySubscription(False)
            self.isRunning = False


    def onInput_onStart(self):
        if self.isRunning:
            return # already running, nothing to do

        self.isRunning = True
        self.trackedHuman = -1
        if self.awareness:
            self.awareness.setEngagementMode(self.getParameter('Engagement Mode'))
            self.awareness.setTrackingMode(self.getParameter('Tracking Mode'))
            self.awareness.setStimulusDetectionEnabled('Sound', self.getParameter('Sound Stimulus'))
            self.awareness.setStimulusDetectionEnabled('Movement', self.getParameter('Movement Stimulus'))
            self.awareness.setStimulusDetectionEnabled('People', self.getParameter('People Stimulus'))
            self.awareness.setStimulusDetectionEnabled('Touch', self.getParameter('Touch Stimulus'))
            self.setALMemorySubscription(True)
            self.awareness.startAwareness()



    def onInput_onStop(self):
        if not self.isRunning:
            return # already stopped, nothing to do

        self.onUnload()
        self.onStopped()


    def setParameter(self, parameterName, newValue):
        GeneratedClass.setParameter(self, parameterName, newValue)

        if self.awareness:
            if parameterName == 'Sound Stimulus':
                self.awareness.setStimulusDetectionEnabled('Sound', newValue)
            elif parameterName == 'Movement Stimulus':
                self.awareness.setStimulusDetectionEnabled('Movement', newValue)
            elif parameterName == 'People Stimulus':
                self.awareness.setStimulusDetectionEnabled('People', newValue)
            elif parameterName == 'Touch Stimulus':
                self.awareness.setStimulusDetectionEnabled('Touch', newValue)


    # callbacks for ALBasicAwareness events
    def onStimulusDetected(self, eventName, stimulusName, subscriberIdentifier):
        self.StimulusDetected(stimulusName)

    def onHumanTracked(self, eventName, humanID, subscriberIdentifier):
        self.trackedHuman = humanID
        self.HumanTracked(humanID)

    def onHumanLost(self, eventName, subscriberIdentifier):
        self.HumanLost(self.trackedHuman)
        self.trackedHuman = -1


    def setALMemorySubscription(self, subscribe):
        self.subscribingLock.acquire()
        if subscribe:
            self.memory.subscribeToEvent('ALBasicAwareness/StimulusDetected', self.getName(), 'onStimulusDetected')
            self.memory.subscribeToEvent('ALBasicAwareness/HumanTracked', self.getName(), 'onHumanTracked')
            self.memory.subscribeToEvent('ALBasicAwareness/HumanLost', self.getName(), 'onHumanLost')
        else:
            self.memory.unsubscribeToEvent('ALBasicAwareness/StimulusDetected', self.getName())
            self.memory.unsubscribeToEvent('ALBasicAwareness/HumanTracked', self.getName())
            self.memory.unsubscribeToEvent('ALBasicAwareness/HumanLost', self.getName())

        self.subscribingLock.release()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the Basic Awareness with the given Engagement and Tracking mode parameters, using the given stimuli." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the Basic Awareness." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Output name="StimulusDetected" type="3" type_size="1" nature="2" inner="0" tooltip="This output is stimulated when BasicAwareness detects a stimulus amongst the tracked stimulus.&#x0A;&#x0A;The output data is the stimulus&apos; name." id="5" />
                                                                    <Output name="HumanTracked" type="2" type_size="1" nature="2" inner="0" tooltip="This output is triggered when ALBasicAwareness detects a stimulus that is confirmed to be a human.&#x0A;&#x0A;The output data is the ID corresponding to the tracked human. It is shared with PeoplePerception and can be used there. This output is triggered with -1 if ALBasicAwareness tried to detect a human but failed." id="6" />
                                                                    <Output name="HumanLost" type="2" type_size="1" nature="2" inner="0" tooltip="This output is triggered when the human currently tracked is lost.&#x0A;&#x0A; The output data is the ID corresponding to the lost human. It can be reused in PeoplePerception." id="7" />
                                                                    <Parameter name="Engagement Mode" inherits_from_parent="0" content_type="3" value="FullyEngaged" default_value="Unengaged" custom_choice="0" tooltip='The engagement mode specifies how &quot;focused&quot; the robot is on the engaged person.' id="8">
                                                                        <Choice value="Unengaged" />
                                                                        <Choice value="FullyEngaged" />
                                                                        <Choice value="SemiEngaged" />
                                                                    </Parameter>
                                                                    <Parameter name="Tracking Mode" inherits_from_parent="0" content_type="3" value="Head" default_value="Head" custom_choice="0" tooltip="The tracking mode describes how the robot keeps eye contact with an engaged person." id="9">
                                                                        <Choice value="Head" />
                                                                        <Choice value="BodyRotation" />
                                                                        <Choice value="WholeBody" />
                                                                    </Parameter>
                                                                    <Parameter name="Sound Stimulus" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="10" />
                                                                    <Parameter name="Movement Stimulus" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="11" />
                                                                    <Parameter name="People Stimulus" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="12" />
                                                                    <Parameter name="Touch Stimulus" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="13" />
                                                                </Box>
                                                                <Box name="TalkRoughly" id="4" localization="8" tooltip="体を動かしている間、適当に喋ります。" x="160" y="231">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram />
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Show Image" id="5" localization="8" tooltip="display an image on the screen&#x0A;&#x0A;V1.0.0&#x0A;" x="161" y="340">
                                                                    <bitmap>media/images/box/interaction/rec_movie.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[

class MyClass(GeneratedClass):

    def onLoad(self):
        self.frameManager = None
        try:
            self.frameManager = ALProxy("ALFrameManager")
        except Exception as e:
            self.logger.error(e)

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def _getAppName(self):
        import os
        if self.frameManager:
            behaviorPath = os.path.normpath(self.frameManager.getBehaviorPath(self.behaviorId))
            appsFolderFragment = os.path.join("PackageManager", "apps")
            if not (appsFolderFragment in behaviorPath):
                self.logger.error("appsFolderFragment is not in behaviorPath")
            fragment = behaviorPath.split(appsFolderFragment, 1)[1]
            return fragment.lstrip("\\/")
        else:
            self.logger.warning("No ALFrameManager")

    def _getAbsoluteUrl(self, partial_url):
        import os
        subPath = os.path.join(self._getAppName(), os.path.normpath(partial_url).lstrip("\\/"))
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        return "http://%s/apps/%s" %(self._getTabletService().robotIp(), subPath.replace(os.path.sep, "/"))

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                url = self.getParameter("ImageUrl")
                if url == '':
                    self.logger.error("URL of the image is empty")
                if not url.startswith('http'):
                    url = self._getAbsoluteUrl(url)
                tabletService.showImage(url)
            except Exception as err:
                self.logger.error("Error during ShowImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't display the image.")
            self.onStopped()

    def onInput_onHideImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                tabletService.hideImage()
            except Exception as err:
                self.logger.error("Error during HideImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't hide the image.")
            self.onStopped()

    def onInput_onPreLoadImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                partialUrl = self.getParameter("ImageUrl")
                fullUrl = self._getAbsoluteUrl(partialUrl)
                tabletService.preLoadImage(fullUrl)
            except Exception as err:
                self.logger.warning("Error during preLoadImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't preload the image.")
            self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="onHideImage" type="1" type_size="1" nature="1" inner="0" tooltip="Hide the image when a signal is received on this input." id="4" />
                                                                    <Input name="onPreLoadImage" type="1" type_size="1" nature="1" inner="0" tooltip="Preload the image when a signal is received on this input." id="5" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                                                                    <Parameter name="ImageUrl" inherits_from_parent="0" content_type="3" value="during_play.png" default_value="" custom_choice="0" tooltip='path of the image inside the &quot;html&quot; folder (e.g. &quot;/images/myimage.png&quot;' id="7" />
                                                                </Box>
                                                                <Link inputowner="13" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="WaitForStartingAction" id="5" localization="8" tooltip="スタート指示のいずれ1種類が発動するのを待機します。&#x0A;" x="162" y="132">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Speech Reco." id="2" localization="8" tooltip="Recognize a word from a list of words set in the box parameters.&#x0A;&#x0A;V1.1.0&#x0A;" x="606" y="21">
                                                                    <bitmap>media/images/box/interaction/ear.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        try:
            self.asr = ALProxy("ALSpeechRecognition")
        except Exception as e:
            self.asr = None
            self.logger.error(e)
        self.memory = ALProxy("ALMemory")

    def onLoad(self):
        from threading import Lock
        self.bIsRunning = False
        self.mutex = Lock()
        self.hasPushed = False
        self.hasSubscribed = False
        self.BIND_PYTHON(self.getName(), "onWordRecognized")

    def onUnload(self):
        from threading import Lock
        self.mutex.acquire()
        try:
            if (self.bIsRunning):
                if (self.hasSubscribed):
                    self.memory.unsubscribeToEvent("WordRecognized", self.getName())
                if (self.hasPushed and self.asr):
                    self.asr.popContexts()
        except RuntimeError, e:
            self.mutex.release()
            raise e
        self.bIsRunning = False;
        self.mutex.release()

    def onInput_onStart(self):
        from threading import Lock
        self.mutex.acquire()
        if(self.bIsRunning):
            self.mutex.release()
            return
        self.bIsRunning = True
        try:
            if self.asr:
                self.asr.setVisualExpression(self.getParameter("Visual expression"))
                self.asr.pushContexts()
            self.hasPushed = True
            if self.asr:
                self.asr.setVocabulary( self.getParameter("Word list").split(';'), self.getParameter("Enable word spotting") )
            self.memory.subscribeToEvent("WordRecognized", self.getName(), "onWordRecognized")
            self.hasSubscribed = True
        except RuntimeError, e:
            self.mutex.release()
            self.onUnload()
            raise e
        self.mutex.release()

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()

    def onWordRecognized(self, key, value, message):
        if(len(value) > 1 and value[1] >= self.getParameter("Confidence threshold (%)")/100.):
            self.wordRecognized(value[0]) #~ activate output of the box
        else:
            self.onNothing()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="Word recognized with a confidence higher than the threshold set in the box parameters." id="5" />
                                                                    <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood." id="6" />
                                                                    <Parameter name="Word list" inherits_from_parent="0" content_type="3" value="スタート" default_value="yes;no" custom_choice="0" tooltip="Try to recognize a word from a list of words set in the box parameters." id="7" />
                                                                    <Parameter name="Confidence threshold (%)" inherits_from_parent="0" content_type="1" value="50" default_value="30" min="0" max="100" tooltip="If the confidence associated with the word recognized is below this threshold, the robot will consider that it is not recognized." id="8" />
                                                                    <Parameter name="Visual expression" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Use the LEDs to show feedbacks from the robot during the recognition.&#x0A;&#x0A;For example:&#x0A;- Eyes leds get blue and turn when the speech recognition is launched.&#x0A;- They get yellow when the robot hears someone talking and analyses what it heard.&#x0A;- They flash in green when the robot understood and flash in red otherwise." id="9" />
                                                                    <Parameter name="Enable word spotting" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="If this option is not activated the robot will only understand exact expressions. If it is, he will spot the exact expressions even in the middle of a sentence.&#x0A;&#x0A;!!Warning!! This option is only available with the speech recognition module using Nuance (ie in Atom version of the robot)." id="10" />
                                                                    <Resource name="Speech recognition" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Tactile Head" id="1" localization="8" tooltip="Detect touch on head tactile sensor." x="612" y="140">
                                                                    <bitmap>media/images/box/sensors/tactileHead.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                                                    <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                                                                    <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                                                                    <Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" />
                                                                    <Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" />
                                                                    <Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                                                    <Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                                                                    <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                    <Resource name="Head-sequence" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Only Once" id="3" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="840" y="40">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onSignal" type="1" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                    <Output name="firstTime" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                </Box>
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="5" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="8" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="9" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="10" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="WaitForStoppingAction" id="2" localization="8" tooltip="ストップ指示のいずれ1種類が発動するのを待機します。&#x0A;" x="469" y="206">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Speech Reco." id="2" localization="8" tooltip="Recognize a word from a list of words set in the box parameters.&#x0A;&#x0A;V1.1.0&#x0A;" x="606" y="21">
                                                                    <bitmap>media/images/box/interaction/ear.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        try:
            self.asr = ALProxy("ALSpeechRecognition")
        except Exception as e:
            self.asr = None
            self.logger.error(e)
        self.memory = ALProxy("ALMemory")

    def onLoad(self):
        from threading import Lock
        self.bIsRunning = False
        self.mutex = Lock()
        self.hasPushed = False
        self.hasSubscribed = False
        self.BIND_PYTHON(self.getName(), "onWordRecognized")

    def onUnload(self):
        from threading import Lock
        self.mutex.acquire()
        try:
            if (self.bIsRunning):
                if (self.hasSubscribed):
                    self.memory.unsubscribeToEvent("WordRecognized", self.getName())
                if (self.hasPushed and self.asr):
                    self.asr.popContexts()
        except RuntimeError, e:
            self.mutex.release()
            raise e
        self.bIsRunning = False;
        self.mutex.release()

    def onInput_onStart(self):
        from threading import Lock
        self.mutex.acquire()
        if(self.bIsRunning):
            self.mutex.release()
            return
        self.bIsRunning = True
        try:
            if self.asr:
                self.asr.setVisualExpression(self.getParameter("Visual expression"))
                self.asr.pushContexts()
            self.hasPushed = True
            if self.asr:
                self.asr.setVocabulary( self.getParameter("Word list").split(';'), self.getParameter("Enable word spotting") )
            self.memory.subscribeToEvent("WordRecognized", self.getName(), "onWordRecognized")
            self.hasSubscribed = True
        except RuntimeError, e:
            self.mutex.release()
            self.onUnload()
            raise e
        self.mutex.release()

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()

    def onWordRecognized(self, key, value, message):
        if(len(value) > 1 and value[1] >= self.getParameter("Confidence threshold (%)")/100.):
            self.wordRecognized(value[0]) #~ activate output of the box
        else:
            self.onNothing()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                    <Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="Word recognized with a confidence higher than the threshold set in the box parameters." id="5" />
                                                                    <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood." id="6" />
                                                                    <Parameter name="Word list" inherits_from_parent="0" content_type="3" value="ストップ" default_value="yes;no" custom_choice="0" tooltip="Try to recognize a word from a list of words set in the box parameters." id="7" />
                                                                    <Parameter name="Confidence threshold (%)" inherits_from_parent="0" content_type="1" value="50" default_value="30" min="0" max="100" tooltip="If the confidence associated with the word recognized is below this threshold, the robot will consider that it is not recognized." id="8" />
                                                                    <Parameter name="Visual expression" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Use the LEDs to show feedbacks from the robot during the recognition.&#x0A;&#x0A;For example:&#x0A;- Eyes leds get blue and turn when the speech recognition is launched.&#x0A;- They get yellow when the robot hears someone talking and analyses what it heard.&#x0A;- They flash in green when the robot understood and flash in red otherwise." id="9" />
                                                                    <Parameter name="Enable word spotting" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="If this option is not activated the robot will only understand exact expressions. If it is, he will spot the exact expressions even in the middle of a sentence.&#x0A;&#x0A;!!Warning!! This option is only available with the speech recognition module using Nuance (ie in Atom version of the robot)." id="10" />
                                                                    <Resource name="Speech recognition" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Tactile Head" id="1" localization="8" tooltip="Detect touch on head tactile sensor." x="612" y="140">
                                                                    <bitmap>media/images/box/sensors/tactileHead.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                                                    <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                                                                    <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                                                                    <Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" />
                                                                    <Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" />
                                                                    <Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223">
                                                                                        <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" />
                                                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                                                    <Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" />
                                                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                                                                    <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                    <Resource name="Head-sequence" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Box name="Only Once" id="3" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="840" y="40">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onSignal" type="1" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                                                                    <Output name="firstTime" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                                                                </Box>
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="5" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="8" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="9" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="10" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="11" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="9" indexofinput="2" outputowner="1" indexofoutput="5" />
                                            <Link inputowner="0" indexofinput="4" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="4" outputowner="11" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="3" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="7" indexofinput="3" outputowner="2" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Wait" id="1" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="712" y="332">
                            <bitmap>media/images/box/wait.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                        </Box>
                        <Box name="Show Image" id="13" localization="8" tooltip="display an image on the screen&#x0A;&#x0A;V1.0.0&#x0A;" x="953" y="34">
                            <bitmap>media/images/box/interaction/rec_movie.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[

class MyClass(GeneratedClass):

    def onLoad(self):
        self.frameManager = None
        try:
            self.frameManager = ALProxy("ALFrameManager")
        except Exception as e:
            self.logger.error(e)

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def _getAppName(self):
        import os
        if self.frameManager:
            behaviorPath = os.path.normpath(self.frameManager.getBehaviorPath(self.behaviorId))
            appsFolderFragment = os.path.join("PackageManager", "apps")
            if not (appsFolderFragment in behaviorPath):
                self.logger.error("appsFolderFragment is not in behaviorPath")
            fragment = behaviorPath.split(appsFolderFragment, 1)[1]
            return fragment.lstrip("\\/")
        else:
            self.logger.warning("No ALFrameManager")

    def _getAbsoluteUrl(self, partial_url):
        import os
        subPath = os.path.join(self._getAppName(), os.path.normpath(partial_url).lstrip("\\/"))
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        return "http://%s/apps/%s" %(self._getTabletService().robotIp(), subPath.replace(os.path.sep, "/"))

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                url = self.getParameter("ImageUrl")
                if url == '':
                    self.logger.error("URL of the image is empty")
                if not url.startswith('http'):
                    url = self._getAbsoluteUrl(url)
                tabletService.showImage(url)
            except Exception as err:
                self.logger.error("Error during ShowImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't display the image.")
            self.onStopped()

    def onInput_onHideImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                tabletService.hideImage()
            except Exception as err:
                self.logger.error("Error during HideImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't hide the image.")
            self.onStopped()

    def onInput_onPreLoadImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                partialUrl = self.getParameter("ImageUrl")
                fullUrl = self._getAbsoluteUrl(partialUrl)
                tabletService.preLoadImage(fullUrl)
            except Exception as err:
                self.logger.warning("Error during preLoadImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't preload the image.")
            self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="onHideImage" type="1" type_size="1" nature="1" inner="0" tooltip="Hide the image when a signal is received on this input." id="4" />
                            <Input name="onPreLoadImage" type="1" type_size="1" nature="1" inner="0" tooltip="Preload the image when a signal is received on this input." id="5" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                            <Parameter name="ImageUrl" inherits_from_parent="0" content_type="3" value="start_image.png" default_value="" custom_choice="0" tooltip='path of the image inside the &quot;html&quot; folder (e.g. &quot;/images/myimage.png&quot;' id="7" />
                        </Box>
                        <Box name="Comment" id="2" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="379" y="153">
                            <bitmap>media/images/box/box-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("喋りをどこに入れたいか。")]]>
</content>
                            </script>
                            <pluginContent>
                                <text>
                                    <![CDATA[喋りをどこに入れたいか。]]>
</text>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        </Box>
                        <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="4" indexofinput="2" outputowner="10" indexofoutput="4" />
                        <Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="4" />
                        <Link inputowner="1" indexofinput="2" outputowner="6" indexofoutput="4" />
                        <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="4" />
                        <Link inputowner="13" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="13" indexofinput="2" outputowner="6" indexofoutput="4" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
